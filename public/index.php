<?php

/**
 * Start new or resume existing session
 */
session_start();

/**
 * В режиме разработки системы, для отображения всех ошибок PHP, используйте значение -1 для error_reporting и 1 для ini_set
 * В режиме пользовательской работы системы, для отключения всех ошибок PHP, используйте значение 0
 * В целях безопасности, в режиме пользовательской работы системы, рекомендуется использовать значение 0
 * Для корректного отображения ошибок PHP на сервере, убедитесь, что для error_reporting используется значение -1, а для ini_set 1  
 * в противном случае, отображение ошибок PHP на сервере не гарантировано
 */
error_reporting(0);
ini_set("display_errors", "0");

/**
 * Директории системы
 * В целях корректной работоспособности системы, изменять данные параметры не рекомендуется
 * В противном случае, работоспособность системы не гарантирована
 * 
 * WWW - /domains/public
 * ROOT - /domains
 * APPLICATION - /application
 * ENGINE - /application/engine
 */
define("WWW", __DIR__);
define("ROOT", dirname(__DIR__));
define("APPLICATION", dirname(__DIR__) . "/application");
define("ENGINE", dirname(__DIR__) . "/application/engine");

/**
 * $last - количество выводимых записей на страницу при постраничной навигации
 * 
 * Вы можете изменить данный параметр на значение, которое необходимо Вам
 * Для корректной работы системы и модуля постраничной навигации, убедитесь, что параметр принимает целочисленное, положительное значение
 * и соответствует условию >= 1
 */
$last = 3;

/** 
 * Открытие нового соединения с сервером MySQL
 * $pdo - объект PDO
 * $db - параметры соединения с сервером MySQL
 * $dsn - строка подключения
 * Проверка правильности открытия соединения с сервером MySQL выполняется при запуске системы
 * Если открыть соединение с сервером MySQL не удалось, будет показано сообщение с кодом ошибки
 * 
 * В режиме разработки системы, для отображения всех ошибок PDO и MySQL, используйте атрибут PDO::ERRMODE_EXCEPTION
 * В режиме пользовательской работы системы, для перехвата ошибок PDO и MySQL, используйте атрибут PDO::ERRMODE_WARNING
 * В целях безопасности, в режиме пользовательской работы системы, рекомендуется использовать значение атрибут PDO::ERRMODE_WARNING
 */
global $pdo;

$db = require_once APPLICATION . "/config/db.php";
$dsn = "mysql:host={$db["host"]};dbname={$db["db"]};charset={$db["charset"]}";

try {
    $pdo = new PDO($dsn, $db["login"], $db["password"]);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_WARNING);
} catch (Exception $ex) {
    exit( "Please check if the connection to the database is correct: " . $ex->getCode() );
}

/******** Универсальное соединения нескольких GET - параметров ********/
$uriSort = "?";
$uriPage = "?";
if ( filter_input(INPUT_SERVER, "REQUEST_URI") ) { #
    foreach ($_GET as $key => $value) {
        if ($key != "page") $uriPage .= "$key=$value&"; #
        if ( ($key != "sort") AND ($key != "page") ) $uriSort .= "$key=$value&"; #
    }
}
/******** Универсальное соединения нескольких GET - параметров ********/

/**
 * Подключение компонентов системы
 */
$files = glob(ENGINE . "/*.php");
foreach ($files AS $file) { 
    require_once $file;
}

/**
 * Подготовительные действия для работы Маршрутизатора 
 * $routes - таблица маршрутизации
 * $uri - полный путь до исполняемого файла
 * 
 * $parameters["uri"] - искомый шаблон. Получение данного параметра осуществляется из таблицы маршрутизации
 * $uri - входная строка. Получение данного параметра осуществляется из адресной строки браузера
 * $matches - результат поиска. Параметр необходим для получения дополнительного параметра, который может быть передан через адресную строку
 * В качестве такого параметра используется $id. Дополнительный параметр всегда находится в ключе 1 массива matches
 * 
 * $id - id строки из таблицы Базы Данных
 */
$routes = require_once APPLICATION . "/config/routes.php";

$uri = filter_input(INPUT_SERVER, "REQUEST_URI");
$uri = trim($uri, "/");

foreach ($routes AS $parameters) { 
    if ( preg_match($parameters["uri"], $uri, $matches) ) { # Если переданный маршрут найден в таблице маршрутизации
        if ( array_key_exists(1, $matches) ) { # Если через адресную строку был передан дополнительный параметр
            $id = dataProtect( $matches[1] ); # Фильтрация получаемого дополнительного параметра из адресной строки
        }
        startRoute($parameters);
        break; # Перывание выполнение текущей структуры foreach
    }
}

if ( empty($matches) ) { # Если переданный маршрут не найден в таблице маршрутизации
    responceCode(404); # HTTP - заголовок #404
}